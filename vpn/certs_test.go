package vpn

import (
	"bytes"
	"testing"
)

var combinedPEMData = []byte(`
-----BEGIN RSA PRIVATE KEY-----
MIIEpQIBAAKCAQEA4gOkyC3rC6jHxcgDCi0okC0aRbZ+WWKXepBHHsaa62vNmh5Y
bW2QXDv5q63ryERt37cjCUzA/9HyslgpBMliHmCNHUKt62DM7W0tu70RLVYGsNM7
NlNCk45oyP0Jv7UdA/S34i/eHGrojt2yVhYAlaRZfolsvv+iLphhd9uQAmg+guA0
Nv3xIzHVACkAX231A1DSo4MyBInt/YSSE2c/Y/mn13r71s0qXCA+YFLT8FcuOuWZ
TXjEtbGzwjJne7Ywv7u6ec7TSCMpdh4bXnak9WKTU3+nOGqrbsBat4t6FoLrpsg+
AhKGzi74ioOGPr7w2UqCBc65l0eX9CdGkBXZcwIDAQABAoIBAQDHLGLYre6GtdRn
LV3QZ/9pHvYaHTq3VrUbI24pZug7MyNbAAb5WCZxwcDCVGCGehdBoUhU97jVOJVi
KWLsfvPixT9WW96coQ+25BH7ciBjDX6T8XIq67CuDD+3b5ZZxSeuxsgNohVgga4z
yJdSWc1mEhFz+3ND1k98NHkggPMlykNN2w4wsdjNl+nmnir1+6Gjv74JAmU98Y/A
CdoyigRmPmkjeQTRfcS/reghFxFexA5PwiAJRbFWNwidbaUDHoORZJO9f1J9xZba
JdNpXvEuI+GKWfb9z3CX5Yuj5uI11Dw4bPFk8O3ZBBRCYwwRnBpx6BqS0PxZJ0cg
7ehKZMzRAoGBAP2y6FGudRpDyfDRd+eY1nVoYb7XFJ0pxxWCFNWCPUCAaqqTHVOu
9EvkYIjc98/jzCBSFCCA1lgSo6KDCySjuy7/GmUIZ8prmeyG7DeO+MeBfZV+Ko/S
HCx20lBJtnnAQ6lanH3SEnQAesKTgRvGX2syfC+3FC64AgsCC5FYep2PAoGBAOQQ
c7s56LWvFBmOrMN5aKpUTH/n+6ky2dWck4h9v5LkXJft+5bAQ4HdTje/RSApRx2a
BcS9wEMKuQmlrZfklHydkVhFSNuJrD5vCWePQwY8lHPmG4YXYwak7KsvFPjVc6Jg
IVE0aelS1TFIMOcltFpRicPQNOmPg2SSoCX7JlvdAoGBAPy8JkR5D5/CuIJ3qoPF
9p+wBPAhRB/tZq8+j5LD1FFVnO2g8S5UtHqGYMT3nMg1nzzzh6l5sA69Qta6xXcS
xX7kFF9iKEO3Pfgr0Vbnz16w2XL75Vqxbe+9z3a8eFSB/OXRpuSRSmDVuXXtjEkn
LheUi7LdJ/YCycY9m1iIVF5xAoGAQOvuBf4WIKIWNrBGvd5xzQryO/btzNyM5iIM
XW5ueoJHWXiFhgR1MyKsgXIRW3ZkqCiQO9FISc1jnztqjzKiklbIaThP5S7ruVoi
czh0+/GC0PtQGnvN1LZeKNzeO3eH01FKKrOg8qqBxeWnBiXVkWBktzkt1s7juF2E
+UrlQIECgYEA42QCQA5O0uFiowbkRi/XmCIU7wsY5wVGN11GJZ5b/zlR//ZshXrn
rICYSPaW1V3n04rEKTpjlN/TQGnS6mnkcHupCpYQFS7su3/Q3u5lJ8lAJqMiAMck
R66d7ZYGDic+QOCNvQ33iRHlyy8sW2ViSB3u8VR4WcTLywftxdlCZ5I=
-----END RSA PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
MIIEmzCCAoOgAwIBAgIQTfkQVDGQxDB5cwBCYhasZTANBgkqhkiG9w0BAQsFADB1
MRgwFgYDVQQKDA9SaXNldXAgTmV0d29ya3MxGzAZBgNVBAsMEmh0dHBzOi8vcmlz
ZXVwLm5ldDE8MDoGA1UEAwwzUmlzZXVwIE5ldHdvcmtzIFJvb3QgQ0EgKGNsaWVu
dCBjZXJ0aWZpY2F0ZXMgb25seSEpMB4XDTIyMDcxODAwMDAwMFoXDTIyMTAxODAw
MDAwMFowLTErMCkGA1UEAwwiVU5MSU1JVEVEOXZmMjhzbGxqNDRpbTN3YXdrMjlh
cHVjaDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOIDpMgt6wuox8XI
AwotKJAtGkW2fllil3qQRx7GmutrzZoeWG1tkFw7+aut68hEbd+3IwlMwP/R8rJY
KQTJYh5gjR1CretgzO1tLbu9ES1WBrDTOzZTQpOOaMj9Cb+1HQP0t+Iv3hxq6I7d
slYWAJWkWX6JbL7/oi6YYXfbkAJoPoLgNDb98SMx1QApAF9t9QNQ0qODMgSJ7f2E
khNnP2P5p9d6+9bNKlwgPmBS0/BXLjrlmU14xLWxs8IyZ3u2ML+7unnO00gjKXYe
G152pPVik1N/pzhqq27AWreLehaC66bIPgIShs4u+IqDhj6+8NlKggXOuZdHl/Qn
RpAV2XMCAwEAAaNvMG0wHQYDVR0OBBYEFO9mYSLXN9emtyZowtP3FE5fvrK9MAsG
A1UdDwQEAwIHgDATBgNVHSUEDDAKBggrBgEFBQcDAjAJBgNVHRMEAjAAMB8GA1Ud
IwQYMBaAFBf0G9XlKgEBTWuiXTYKKQmWZYBGMA0GCSqGSIb3DQEBCwUAA4ICAQCj
JSeWxB2ZmNIynYFO9UI1DRKm2qYYtD9YuE0TiNQ3WKmUh+cFZcaPsSFm6NJV1Bhr
KeZBxme71F4hIcZB+Bj5AFuke99Uuw4AoNMIwJKujCONAOA4XUns3oLDPrPM+KZ0
6IIgkwzGGGIlpnd+9Uz7EOG2fodkPCffDyEpRm08cQG9lm4agLDFdmQhClz/PiuT
2tkb1+YWlxU8Ypd//3uKb3lsd8nwPABafO7S2lVIvkL/Az3i1kxDXGJABjhOOLYl
/SjYOomCPqG+Q7ChWEtdcN+rfB1cpG9fhttm0YuVWrbJ6ySkocyiGi5+5basClwr
jXXQF1piEGFYG0t5NakjNGlUAliKvv+dnZSyxNAJgFx+QE3Bh6jePtClOitAetJt
eOBRXzJmm1vASHMBhkjyhAGwJsmFj0UiAVo9J4TtD0+3lMK/wvkNlrMCdHKPRl5q
ijvVSfhO0BN3rL8cwZSTB+IAJKkfNuZcDAC0qsbJbD/qZWWSat5wY8+cePB+i4Tq
xJLszfazA1Yu3a/thU5O+bfli5X9P3WYFXmVTfwNmNZ3GxRNnrsdKIfxG3zKMnsh
XQ6Z15IfYbo+pOlKhO0kd2PFZlxXrGudPzUOU13TpQeA9Gpt+ad2PDvZwyCHWGjM
i/PNrGgAxWTE0phy3dO3sUW+6Dx9SvQm4DJRnsWS+g==
-----END CERTIFICATE-----
`)

var combinedPEMDataReversed = []byte(`
-----BEGIN CERTIFICATE-----
MIIEmzCCAoOgAwIBAgIQTfkQVDGQxDB5cwBCYhasZTANBgkqhkiG9w0BAQsFADB1
MRgwFgYDVQQKDA9SaXNldXAgTmV0d29ya3MxGzAZBgNVBAsMEmh0dHBzOi8vcmlz
ZXVwLm5ldDE8MDoGA1UEAwwzUmlzZXVwIE5ldHdvcmtzIFJvb3QgQ0EgKGNsaWVu
dCBjZXJ0aWZpY2F0ZXMgb25seSEpMB4XDTIyMDcxODAwMDAwMFoXDTIyMTAxODAw
MDAwMFowLTErMCkGA1UEAwwiVU5MSU1JVEVEOXZmMjhzbGxqNDRpbTN3YXdrMjlh
cHVjaDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOIDpMgt6wuox8XI
AwotKJAtGkW2fllil3qQRx7GmutrzZoeWG1tkFw7+aut68hEbd+3IwlMwP/R8rJY
KQTJYh5gjR1CretgzO1tLbu9ES1WBrDTOzZTQpOOaMj9Cb+1HQP0t+Iv3hxq6I7d
slYWAJWkWX6JbL7/oi6YYXfbkAJoPoLgNDb98SMx1QApAF9t9QNQ0qODMgSJ7f2E
khNnP2P5p9d6+9bNKlwgPmBS0/BXLjrlmU14xLWxs8IyZ3u2ML+7unnO00gjKXYe
G152pPVik1N/pzhqq27AWreLehaC66bIPgIShs4u+IqDhj6+8NlKggXOuZdHl/Qn
RpAV2XMCAwEAAaNvMG0wHQYDVR0OBBYEFO9mYSLXN9emtyZowtP3FE5fvrK9MAsG
A1UdDwQEAwIHgDATBgNVHSUEDDAKBggrBgEFBQcDAjAJBgNVHRMEAjAAMB8GA1Ud
IwQYMBaAFBf0G9XlKgEBTWuiXTYKKQmWZYBGMA0GCSqGSIb3DQEBCwUAA4ICAQCj
JSeWxB2ZmNIynYFO9UI1DRKm2qYYtD9YuE0TiNQ3WKmUh+cFZcaPsSFm6NJV1Bhr
KeZBxme71F4hIcZB+Bj5AFuke99Uuw4AoNMIwJKujCONAOA4XUns3oLDPrPM+KZ0
6IIgkwzGGGIlpnd+9Uz7EOG2fodkPCffDyEpRm08cQG9lm4agLDFdmQhClz/PiuT
2tkb1+YWlxU8Ypd//3uKb3lsd8nwPABafO7S2lVIvkL/Az3i1kxDXGJABjhOOLYl
/SjYOomCPqG+Q7ChWEtdcN+rfB1cpG9fhttm0YuVWrbJ6ySkocyiGi5+5basClwr
jXXQF1piEGFYG0t5NakjNGlUAliKvv+dnZSyxNAJgFx+QE3Bh6jePtClOitAetJt
eOBRXzJmm1vASHMBhkjyhAGwJsmFj0UiAVo9J4TtD0+3lMK/wvkNlrMCdHKPRl5q
ijvVSfhO0BN3rL8cwZSTB+IAJKkfNuZcDAC0qsbJbD/qZWWSat5wY8+cePB+i4Tq
xJLszfazA1Yu3a/thU5O+bfli5X9P3WYFXmVTfwNmNZ3GxRNnrsdKIfxG3zKMnsh
XQ6Z15IfYbo+pOlKhO0kd2PFZlxXrGudPzUOU13TpQeA9Gpt+ad2PDvZwyCHWGjM
i/PNrGgAxWTE0phy3dO3sUW+6Dx9SvQm4DJRnsWS+g==
-----END CERTIFICATE-----
-----BEGIN RSA PRIVATE KEY-----
MIIEpQIBAAKCAQEA4gOkyC3rC6jHxcgDCi0okC0aRbZ+WWKXepBHHsaa62vNmh5Y
bW2QXDv5q63ryERt37cjCUzA/9HyslgpBMliHmCNHUKt62DM7W0tu70RLVYGsNM7
NlNCk45oyP0Jv7UdA/S34i/eHGrojt2yVhYAlaRZfolsvv+iLphhd9uQAmg+guA0
Nv3xIzHVACkAX231A1DSo4MyBInt/YSSE2c/Y/mn13r71s0qXCA+YFLT8FcuOuWZ
TXjEtbGzwjJne7Ywv7u6ec7TSCMpdh4bXnak9WKTU3+nOGqrbsBat4t6FoLrpsg+
AhKGzi74ioOGPr7w2UqCBc65l0eX9CdGkBXZcwIDAQABAoIBAQDHLGLYre6GtdRn
LV3QZ/9pHvYaHTq3VrUbI24pZug7MyNbAAb5WCZxwcDCVGCGehdBoUhU97jVOJVi
KWLsfvPixT9WW96coQ+25BH7ciBjDX6T8XIq67CuDD+3b5ZZxSeuxsgNohVgga4z
yJdSWc1mEhFz+3ND1k98NHkggPMlykNN2w4wsdjNl+nmnir1+6Gjv74JAmU98Y/A
CdoyigRmPmkjeQTRfcS/reghFxFexA5PwiAJRbFWNwidbaUDHoORZJO9f1J9xZba
JdNpXvEuI+GKWfb9z3CX5Yuj5uI11Dw4bPFk8O3ZBBRCYwwRnBpx6BqS0PxZJ0cg
7ehKZMzRAoGBAP2y6FGudRpDyfDRd+eY1nVoYb7XFJ0pxxWCFNWCPUCAaqqTHVOu
9EvkYIjc98/jzCBSFCCA1lgSo6KDCySjuy7/GmUIZ8prmeyG7DeO+MeBfZV+Ko/S
HCx20lBJtnnAQ6lanH3SEnQAesKTgRvGX2syfC+3FC64AgsCC5FYep2PAoGBAOQQ
c7s56LWvFBmOrMN5aKpUTH/n+6ky2dWck4h9v5LkXJft+5bAQ4HdTje/RSApRx2a
BcS9wEMKuQmlrZfklHydkVhFSNuJrD5vCWePQwY8lHPmG4YXYwak7KsvFPjVc6Jg
IVE0aelS1TFIMOcltFpRicPQNOmPg2SSoCX7JlvdAoGBAPy8JkR5D5/CuIJ3qoPF
9p+wBPAhRB/tZq8+j5LD1FFVnO2g8S5UtHqGYMT3nMg1nzzzh6l5sA69Qta6xXcS
xX7kFF9iKEO3Pfgr0Vbnz16w2XL75Vqxbe+9z3a8eFSB/OXRpuSRSmDVuXXtjEkn
LheUi7LdJ/YCycY9m1iIVF5xAoGAQOvuBf4WIKIWNrBGvd5xzQryO/btzNyM5iIM
XW5ueoJHWXiFhgR1MyKsgXIRW3ZkqCiQO9FISc1jnztqjzKiklbIaThP5S7ruVoi
czh0+/GC0PtQGnvN1LZeKNzeO3eH01FKKrOg8qqBxeWnBiXVkWBktzkt1s7juF2E
+UrlQIECgYEA42QCQA5O0uFiowbkRi/XmCIU7wsY5wVGN11GJZ5b/zlR//ZshXrn
rICYSPaW1V3n04rEKTpjlN/TQGnS6mnkcHupCpYQFS7su3/Q3u5lJ8lAJqMiAMck
R66d7ZYGDic+QOCNvQ33iRHlyy8sW2ViSB3u8VR4WcTLywftxdlCZ5I=
-----END RSA PRIVATE KEY-----
`)

var testKeyPEM = `-----BEGIN RSA PRIVATE KEY-----
MIIEpQIBAAKCAQEA4gOkyC3rC6jHxcgDCi0okC0aRbZ+WWKXepBHHsaa62vNmh5Y
bW2QXDv5q63ryERt37cjCUzA/9HyslgpBMliHmCNHUKt62DM7W0tu70RLVYGsNM7
NlNCk45oyP0Jv7UdA/S34i/eHGrojt2yVhYAlaRZfolsvv+iLphhd9uQAmg+guA0
Nv3xIzHVACkAX231A1DSo4MyBInt/YSSE2c/Y/mn13r71s0qXCA+YFLT8FcuOuWZ
TXjEtbGzwjJne7Ywv7u6ec7TSCMpdh4bXnak9WKTU3+nOGqrbsBat4t6FoLrpsg+
AhKGzi74ioOGPr7w2UqCBc65l0eX9CdGkBXZcwIDAQABAoIBAQDHLGLYre6GtdRn
LV3QZ/9pHvYaHTq3VrUbI24pZug7MyNbAAb5WCZxwcDCVGCGehdBoUhU97jVOJVi
KWLsfvPixT9WW96coQ+25BH7ciBjDX6T8XIq67CuDD+3b5ZZxSeuxsgNohVgga4z
yJdSWc1mEhFz+3ND1k98NHkggPMlykNN2w4wsdjNl+nmnir1+6Gjv74JAmU98Y/A
CdoyigRmPmkjeQTRfcS/reghFxFexA5PwiAJRbFWNwidbaUDHoORZJO9f1J9xZba
JdNpXvEuI+GKWfb9z3CX5Yuj5uI11Dw4bPFk8O3ZBBRCYwwRnBpx6BqS0PxZJ0cg
7ehKZMzRAoGBAP2y6FGudRpDyfDRd+eY1nVoYb7XFJ0pxxWCFNWCPUCAaqqTHVOu
9EvkYIjc98/jzCBSFCCA1lgSo6KDCySjuy7/GmUIZ8prmeyG7DeO+MeBfZV+Ko/S
HCx20lBJtnnAQ6lanH3SEnQAesKTgRvGX2syfC+3FC64AgsCC5FYep2PAoGBAOQQ
c7s56LWvFBmOrMN5aKpUTH/n+6ky2dWck4h9v5LkXJft+5bAQ4HdTje/RSApRx2a
BcS9wEMKuQmlrZfklHydkVhFSNuJrD5vCWePQwY8lHPmG4YXYwak7KsvFPjVc6Jg
IVE0aelS1TFIMOcltFpRicPQNOmPg2SSoCX7JlvdAoGBAPy8JkR5D5/CuIJ3qoPF
9p+wBPAhRB/tZq8+j5LD1FFVnO2g8S5UtHqGYMT3nMg1nzzzh6l5sA69Qta6xXcS
xX7kFF9iKEO3Pfgr0Vbnz16w2XL75Vqxbe+9z3a8eFSB/OXRpuSRSmDVuXXtjEkn
LheUi7LdJ/YCycY9m1iIVF5xAoGAQOvuBf4WIKIWNrBGvd5xzQryO/btzNyM5iIM
XW5ueoJHWXiFhgR1MyKsgXIRW3ZkqCiQO9FISc1jnztqjzKiklbIaThP5S7ruVoi
czh0+/GC0PtQGnvN1LZeKNzeO3eH01FKKrOg8qqBxeWnBiXVkWBktzkt1s7juF2E
+UrlQIECgYEA42QCQA5O0uFiowbkRi/XmCIU7wsY5wVGN11GJZ5b/zlR//ZshXrn
rICYSPaW1V3n04rEKTpjlN/TQGnS6mnkcHupCpYQFS7su3/Q3u5lJ8lAJqMiAMck
R66d7ZYGDic+QOCNvQ33iRHlyy8sW2ViSB3u8VR4WcTLywftxdlCZ5I=
-----END RSA PRIVATE KEY-----
`

var testCertPEM = `-----BEGIN CERTIFICATE-----
MIIEmzCCAoOgAwIBAgIQTfkQVDGQxDB5cwBCYhasZTANBgkqhkiG9w0BAQsFADB1
MRgwFgYDVQQKDA9SaXNldXAgTmV0d29ya3MxGzAZBgNVBAsMEmh0dHBzOi8vcmlz
ZXVwLm5ldDE8MDoGA1UEAwwzUmlzZXVwIE5ldHdvcmtzIFJvb3QgQ0EgKGNsaWVu
dCBjZXJ0aWZpY2F0ZXMgb25seSEpMB4XDTIyMDcxODAwMDAwMFoXDTIyMTAxODAw
MDAwMFowLTErMCkGA1UEAwwiVU5MSU1JVEVEOXZmMjhzbGxqNDRpbTN3YXdrMjlh
cHVjaDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAOIDpMgt6wuox8XI
AwotKJAtGkW2fllil3qQRx7GmutrzZoeWG1tkFw7+aut68hEbd+3IwlMwP/R8rJY
KQTJYh5gjR1CretgzO1tLbu9ES1WBrDTOzZTQpOOaMj9Cb+1HQP0t+Iv3hxq6I7d
slYWAJWkWX6JbL7/oi6YYXfbkAJoPoLgNDb98SMx1QApAF9t9QNQ0qODMgSJ7f2E
khNnP2P5p9d6+9bNKlwgPmBS0/BXLjrlmU14xLWxs8IyZ3u2ML+7unnO00gjKXYe
G152pPVik1N/pzhqq27AWreLehaC66bIPgIShs4u+IqDhj6+8NlKggXOuZdHl/Qn
RpAV2XMCAwEAAaNvMG0wHQYDVR0OBBYEFO9mYSLXN9emtyZowtP3FE5fvrK9MAsG
A1UdDwQEAwIHgDATBgNVHSUEDDAKBggrBgEFBQcDAjAJBgNVHRMEAjAAMB8GA1Ud
IwQYMBaAFBf0G9XlKgEBTWuiXTYKKQmWZYBGMA0GCSqGSIb3DQEBCwUAA4ICAQCj
JSeWxB2ZmNIynYFO9UI1DRKm2qYYtD9YuE0TiNQ3WKmUh+cFZcaPsSFm6NJV1Bhr
KeZBxme71F4hIcZB+Bj5AFuke99Uuw4AoNMIwJKujCONAOA4XUns3oLDPrPM+KZ0
6IIgkwzGGGIlpnd+9Uz7EOG2fodkPCffDyEpRm08cQG9lm4agLDFdmQhClz/PiuT
2tkb1+YWlxU8Ypd//3uKb3lsd8nwPABafO7S2lVIvkL/Az3i1kxDXGJABjhOOLYl
/SjYOomCPqG+Q7ChWEtdcN+rfB1cpG9fhttm0YuVWrbJ6ySkocyiGi5+5basClwr
jXXQF1piEGFYG0t5NakjNGlUAliKvv+dnZSyxNAJgFx+QE3Bh6jePtClOitAetJt
eOBRXzJmm1vASHMBhkjyhAGwJsmFj0UiAVo9J4TtD0+3lMK/wvkNlrMCdHKPRl5q
ijvVSfhO0BN3rL8cwZSTB+IAJKkfNuZcDAC0qsbJbD/qZWWSat5wY8+cePB+i4Tq
xJLszfazA1Yu3a/thU5O+bfli5X9P3WYFXmVTfwNmNZ3GxRNnrsdKIfxG3zKMnsh
XQ6Z15IfYbo+pOlKhO0kd2PFZlxXrGudPzUOU13TpQeA9Gpt+ad2PDvZwyCHWGjM
i/PNrGgAxWTE0phy3dO3sUW+6Dx9SvQm4DJRnsWS+g==
-----END CERTIFICATE-----
`

func Test_splitCombinedPEM(t *testing.T) {
	type args struct {
		combined []byte
	}
	tests := []struct {
		name     string
		args     args
		wantKey  []byte
		wantCert []byte
		wantErr  error
	}{
		{
			name:     "a well formed cert is parsed ok",
			args:     args{combinedPEMData},
			wantKey:  []byte(testKeyPEM),
			wantCert: []byte(testCertPEM),
			wantErr:  nil,
		},
		{
			name:     "a well formed cert in reverse order is parsed ok",
			args:     args{combinedPEMDataReversed},
			wantKey:  []byte(testKeyPEM),
			wantCert: []byte(testCertPEM),
			wantErr:  nil,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotKey, gotCert, err := splitCombinedPEM(tt.args.combined)
			if err != tt.wantErr {
				t.Errorf("splitCombinedPEM() gotErr = %v, want %v", err, tt.wantErr)
			}
			if !bytes.Equal(gotKey, tt.wantKey) {
				t.Errorf("splitCombinedPEM() gotKey = %v, want %v", gotKey, tt.wantKey)
			}
			if !bytes.Equal(gotCert, tt.wantCert) {
				t.Errorf("splitCombinedPEM() gotCert = %v, want %v", gotCert, tt.wantCert)
			}
		})
	}
}
